{"ast":null,"code":"var _jsxFileName = \"E:\\\\ClubSync\\\\frontend\\\\src\\\\students\\\\StudentLogin.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/students/StudentLogin.js\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styles from './StudentLogin.module.css';\n// Assuming axios is installed (npm install axios) - often simpler than fetch for JSON/credentials\n// import axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StudentLogin = () => {\n  _s();\n  const [uid, setUid] = useState('');\n  const [upassword, setUpassword] = useState('');\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    console.log('Attempting login for UID:', uid); // Keep logging for debug\n\n    try {\n      // --- UPDATED API ENDPOINT ---\n      const apiUrl = 'http://localhost:3001/api/students/auth/login'; // Use the specific auth route\n\n      const res = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          uid,\n          upassword\n        }),\n        // Send uid and upassword\n        credentials: 'include' // Important for sessions/cookies\n      });\n      const data = await res.json(); // Always try to parse JSON response\n\n      if (res.ok && data.student) {\n        // Check res.ok AND if student data exists\n        alert('Login Successful');\n\n        // --- STORE ALL NECESSARY INFO ---\n        localStorage.setItem('studentId', data.student._id); // MongoDB _id (string)\n        localStorage.setItem('studentName', data.student.uname); // Student Name (string)\n        localStorage.setItem('studentUid', data.student.uid); // Numeric UID (will be stored as string)\n\n        console.log('Login Success:', data.message);\n        console.log('Stored studentId:', data.student._id);\n        console.log('Stored studentName:', data.student.uname);\n        console.log('Stored studentUid:', data.student.uid); // Log the stored UID\n\n        // Navigate to dashboard\n        console.log('Navigating to /student/dashboard');\n        navigate('/student/dashboard');\n      } else {\n        // Handle errors reported by the server (e.g., invalid credentials)\n        console.error('Login failed:', data.message || `HTTP status ${res.status}`);\n        setError(data.message || 'Login failed. Please check your credentials.');\n      }\n    } catch (err) {\n      // Handle network errors or other frontend issues during fetch\n      console.error('Login fetch error:', err);\n      setError('Login failed. Could not connect to server.');\n    }\n  };\n\n  // --- Alternative using Axios (often cleaner) ---\n\n  const handleAxiosSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    console.log('Attempting login for UID:', uid);\n    try {\n      const response = await axios.post('http://localhost:3001/api/students/auth/login', {\n        uid,\n        upassword\n      }, {\n        withCredentials: true\n      } // Axios equivalent of credentials: 'include'\n      );\n      if (response.data && response.data.student) {\n        alert('Login Successful');\n        localStorage.setItem('studentId', response.data.student._id);\n        localStorage.setItem('studentName', response.data.student.uname);\n        localStorage.setItem('studentUid', response.data.student.uid);\n        console.log('Login Success:', response.data.message);\n        console.log('Stored studentId:', response.data.student._id);\n        console.log('Stored studentName:', response.data.student.uname);\n        console.log('Stored studentUid:', response.data.student.uid);\n        console.log('Navigating to /student/dashboard');\n        navigate('/student/dashboard');\n      } else {\n        // Should not happen if backend sends correct response, but good practice\n        setError('Login failed: Invalid response from server.');\n      }\n    } catch (axiosError) {\n      console.error('Login Axios error:', axiosError);\n      if (axiosError.response) {\n        // Error response from server (e.g., 401 Unauthorized)\n        setError(axiosError.response.data.message || 'Login failed. Please check your credentials.');\n      } else if (axiosError.request) {\n        // Request made but no response received\n        setError('Login failed: No response from server.');\n      } else {\n        // Other errors (e.g., setting up the request)\n        setError('Login failed: An error occurred.');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.studentLoginBody,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.studentLoginContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/oca.jpg\",\n        alt: \"Student Logo\",\n        className: styles.studentLoginContainer__img\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: styles.studentLoginContainer__h2,\n        children: \"Student Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.studentLoginContainer__inputGroup,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\" // Keep as number input\n            ,\n            name: \"uid\",\n            value: uid\n            // Prevent non-numeric input if desired, although type=\"number\" helps\n            ,\n            onChange: e => setUid(e.target.value),\n            required: true,\n            placeholder: \" \",\n            className: styles.studentLoginContainer__inputGroup__input\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: styles.studentLoginContainer__inputGroup__label,\n            children: \"Enter Student ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.studentLoginContainer__inputGroup,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            name: \"upassword\",\n            value: upassword,\n            onChange: e => setUpassword(e.target.value),\n            required: true,\n            placeholder: \" \",\n            className: styles.studentLoginContainer__inputGroup__input\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: styles.studentLoginContainer__inputGroup__label,\n            children: \"Enter your password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: styles.studentLoginContainer__button,\n          children: \"Log In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.errorMessage,\n          style: {\n            color: 'red',\n            textAlign: 'center',\n            marginTop: '10px'\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n_s(StudentLogin, \"5cpvc6/IZOFuYh2m7awJ5F+QNcg=\", false, function () {\n  return [useNavigate];\n});\n_c = StudentLogin;\nexport default StudentLogin;\nvar _c;\n$RefreshReg$(_c, \"StudentLogin\");","map":{"version":3,"names":["React","useState","useNavigate","styles","jsxDEV","_jsxDEV","StudentLogin","_s","uid","setUid","upassword","setUpassword","error","setError","navigate","handleSubmit","e","preventDefault","console","log","apiUrl","res","fetch","method","headers","body","JSON","stringify","credentials","data","json","ok","student","alert","localStorage","setItem","_id","uname","message","status","err","handleAxiosSubmit","response","axios","post","withCredentials","axiosError","request","className","studentLoginBody","children","studentLoginContainer","src","alt","studentLoginContainer__img","fileName","_jsxFileName","lineNumber","columnNumber","studentLoginContainer__h2","onSubmit","studentLoginContainer__inputGroup","type","name","value","onChange","target","required","placeholder","studentLoginContainer__inputGroup__input","studentLoginContainer__inputGroup__label","studentLoginContainer__button","errorMessage","style","color","textAlign","marginTop","_c","$RefreshReg$"],"sources":["E:/ClubSync/frontend/src/students/StudentLogin.jsx"],"sourcesContent":["// frontend/src/students/StudentLogin.js\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styles from './StudentLogin.module.css';\r\n// Assuming axios is installed (npm install axios) - often simpler than fetch for JSON/credentials\r\n// import axios from 'axios';\r\n\r\nconst StudentLogin = () => {\r\n    const [uid, setUid] = useState('');\r\n    const [upassword, setUpassword] = useState('');\r\n    const [error, setError] = useState('');\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        console.log('Attempting login for UID:', uid); // Keep logging for debug\r\n\r\n        try {\r\n            // --- UPDATED API ENDPOINT ---\r\n            const apiUrl = 'http://localhost:3001/api/students/auth/login'; // Use the specific auth route\r\n\r\n            const res = await fetch(apiUrl, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ uid, upassword }), // Send uid and upassword\r\n                credentials: 'include' // Important for sessions/cookies\r\n            });\r\n\r\n            const data = await res.json(); // Always try to parse JSON response\r\n\r\n            if (res.ok && data.student) { // Check res.ok AND if student data exists\r\n                alert('Login Successful');\r\n\r\n                // --- STORE ALL NECESSARY INFO ---\r\n                localStorage.setItem('studentId', data.student._id); // MongoDB _id (string)\r\n                localStorage.setItem('studentName', data.student.uname); // Student Name (string)\r\n                localStorage.setItem('studentUid', data.student.uid); // Numeric UID (will be stored as string)\r\n\r\n                console.log('Login Success:', data.message);\r\n                console.log('Stored studentId:', data.student._id);\r\n                console.log('Stored studentName:', data.student.uname);\r\n                console.log('Stored studentUid:', data.student.uid); // Log the stored UID\r\n\r\n                // Navigate to dashboard\r\n                console.log('Navigating to /student/dashboard');\r\n                navigate('/student/dashboard');\r\n\r\n            } else {\r\n                // Handle errors reported by the server (e.g., invalid credentials)\r\n                console.error('Login failed:', data.message || `HTTP status ${res.status}`);\r\n                setError(data.message || 'Login failed. Please check your credentials.');\r\n            }\r\n        } catch (err) {\r\n            // Handle network errors or other frontend issues during fetch\r\n            console.error('Login fetch error:', err);\r\n            setError('Login failed. Could not connect to server.');\r\n        }\r\n    };\r\n\r\n    // --- Alternative using Axios (often cleaner) ---\r\n    \r\n    const handleAxiosSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        console.log('Attempting login for UID:', uid);\r\n\r\n        try {\r\n            const response = await axios.post(\r\n                'http://localhost:3001/api/students/auth/login',\r\n                { uid, upassword },\r\n                { withCredentials: true } // Axios equivalent of credentials: 'include'\r\n            );\r\n\r\n            if (response.data && response.data.student) {\r\n                 alert('Login Successful');\r\n                 localStorage.setItem('studentId', response.data.student._id);\r\n                 localStorage.setItem('studentName', response.data.student.uname);\r\n                 localStorage.setItem('studentUid', response.data.student.uid);\r\n\r\n                 console.log('Login Success:', response.data.message);\r\n                 console.log('Stored studentId:', response.data.student._id);\r\n                 console.log('Stored studentName:', response.data.student.uname);\r\n                 console.log('Stored studentUid:', response.data.student.uid);\r\n\r\n                 console.log('Navigating to /student/dashboard');\r\n                 navigate('/student/dashboard');\r\n            } else {\r\n                 // Should not happen if backend sends correct response, but good practice\r\n                 setError('Login failed: Invalid response from server.');\r\n            }\r\n\r\n        } catch (axiosError) {\r\n            console.error('Login Axios error:', axiosError);\r\n            if (axiosError.response) {\r\n                // Error response from server (e.g., 401 Unauthorized)\r\n                setError(axiosError.response.data.message || 'Login failed. Please check your credentials.');\r\n            } else if (axiosError.request) {\r\n                // Request made but no response received\r\n                setError('Login failed: No response from server.');\r\n            } else {\r\n                // Other errors (e.g., setting up the request)\r\n                setError('Login failed: An error occurred.');\r\n            }\r\n        }\r\n    };\r\n    \r\n\r\n\r\n    return (\r\n        <div className={styles.studentLoginBody}>\r\n            <div className={styles.studentLoginContainer}>\r\n                <img src=\"/images/oca.jpg\" alt=\"Student Logo\" className={styles.studentLoginContainer__img} />\r\n                <h2 className={styles.studentLoginContainer__h2}>Student Login</h2>\r\n                {/* Use handleSubmit (fetch) or handleAxiosSubmit */}\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className={styles.studentLoginContainer__inputGroup}>\r\n                        <input\r\n                            type=\"number\" // Keep as number input\r\n                            name=\"uid\"\r\n                            value={uid}\r\n                            // Prevent non-numeric input if desired, although type=\"number\" helps\r\n                            onChange={(e) => setUid(e.target.value)}\r\n                            required\r\n                            placeholder=\" \"\r\n                            className={styles.studentLoginContainer__inputGroup__input}\r\n                        />\r\n                        <label className={styles.studentLoginContainer__inputGroup__label}>Enter Student ID</label>\r\n                    </div>\r\n                    <div className={styles.studentLoginContainer__inputGroup}>\r\n                        <input\r\n                            type=\"password\"\r\n                            name=\"upassword\"\r\n                            value={upassword}\r\n                            onChange={(e) => setUpassword(e.target.value)}\r\n                            required\r\n                            placeholder=\" \"\r\n                            className={styles.studentLoginContainer__inputGroup__input}\r\n                        />\r\n                        <label className={styles.studentLoginContainer__inputGroup__label}>Enter your password</label>\r\n                    </div>\r\n                    {/* Remember me and Forgot password links */}\r\n                    {/* ... */}\r\n                    <button type=\"submit\" className={styles.studentLoginContainer__button}>Log In</button>\r\n                    {error && <p className={styles.errorMessage} style={{ color: 'red', textAlign: 'center', marginTop: '10px' }}>{error}</p>}\r\n                    {/* Register and Back links */}\r\n                    {/* ... */}\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StudentLogin;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}