{"ast":null,"code":"var _jsxFileName = \"E:\\\\ClubSync\\\\frontend\\\\src\\\\students\\\\JoinClubsPage.jsx\",\n  _s = $RefreshSig$();\n// src/students/JoinClubsPage.jsx\nimport React, { useState, useEffect } from 'react';\nimport './JoinClubsPage.css'; // Import the CSS file from the same directory\n\n// --- API Call Functions (Moved here as per request) ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = '/api'; // Adjust if your API is served from a different path\n\n// Helper to handle fetch responses\nasync function handleResponse(response) {\n  const data = await response.json();\n  if (!response.ok) {\n    const error = new Error(data.message || 'Something went wrong');\n    error.status = response.status;\n    error.data = data; // Attach the response body to the error\n    throw error;\n  }\n  return data;\n}\n\n// Check if student is authenticated\nconst checkStudentAuth = async () => {\n  const response = await fetch(`${API_BASE_URL}/student/check-auth`);\n  // No need to throw error on 401 here, the page component handles non-logged-in state\n  const data = await response.json();\n  // Attach the raw status for the component to check\n  data.status = response.status;\n  return data;\n};\n\n// Fetch all currently recruiting clubs\nconst fetchRecruitingClubs = async () => {\n  const response = await fetch(`${API_BASE_URL}/recruitment/recruiting`);\n  return handleResponse(response);\n};\n\n// Register student for a club recruitment\nconst registerForClub = async recruitmentId => {\n  const response = await fetch(`${API_BASE_URL}/student/register-club`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      recruitmentId\n    })\n  });\n  return handleResponse(response);\n};\n\n// Fetch pending interviews count for the logged-in student\nconst fetchPendingInterviewsCount = async () => {\n  const response = await fetch(`${API_BASE_URL}/student/pending-interviews`);\n  return handleResponse(response);\n};\n// --- End API Call Functions ---\n\nfunction JoinClubsPage() {\n  _s();\n  const [recruitingClubs, setRecruitingClubs] = useState([]);\n  const [filteredClubs, setFilteredClubs] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [pendingCount, setPendingCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [student, setStudent] = useState(null); // To store logged-in student info\n\n  // --- Authentication Check and Initial Data Fetch ---\n  useEffect(() => {\n    const initializePage = async () => {\n      try {\n        // Check Authentication\n        const authData = await checkStudentAuth();\n        if (!authData.isLoggedIn) {\n          console.log(\"Student not logged in, redirecting...\");\n          // Use window.location for a simple redirect, replace with React Router navigate if used\n          window.location.href = '/login'; // Adjust login page path\n          return; // Stop execution\n        }\n        setStudent(authData.student); // Store student info from session\n\n        // Fetch initial data only if authenticated\n        const clubsData = await fetchRecruitingClubs();\n        setRecruitingClubs(clubsData);\n        setFilteredClubs(clubsData); // Initially show all clubs\n\n        const pendingData = await fetchPendingInterviewsCount();\n        setPendingCount(pendingData.pendingCount);\n      } catch (err) {\n        console.error(\"Initialization Error:\", err);\n        if (err.status !== 401) {\n          // Avoid showing error if it's just an auth redirect\n          setError(\"Failed to load data. Please try again.\");\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializePage();\n  }, []); // Empty dependency array means this runs once on mount\n\n  // --- Handle Search Logic ---\n  useEffect(() => {\n    const query = searchTerm.toLowerCase();\n    const filtered = recruitingClubs.filter(club => {\n      // Search by club name or numeric club ID (cid)\n      const nameMatch = club.clubName && club.clubName.toLowerCase().includes(query);\n      // Convert cid to string for searching, handle null/undefined cid\n      const idMatch = club.cid != null && String(club.cid).includes(query);\n      return nameMatch || idMatch;\n    });\n    setFilteredClubs(filtered);\n  }, [searchTerm, recruitingClubs]); // Re-run filter when search term or clubs list changes\n\n  // --- Handle Registration ---\n  const handleRegister = async recruitmentId => {\n    // Find the club in the current filtered list to potentially update its button state immediately\n    // This is a basic approach; managing loading state per card is more complex.\n    // We'll just rely on the state update after the fetch for simplicity as requested.\n\n    setError(null); // Clear previous errors\n\n    try {\n      const result = await registerForClub(recruitmentId);\n      console.log(\"Registration result:\", result);\n\n      // Update pending count from the backend response\n      setPendingCount(result.pendingCount);\n\n      // Update the local state for recruitingClubs to reflect the student's new pending status\n      // This ensures the button changes to \"Already Applied\" without a full page reload.\n      setRecruitingClubs(prevClubs => prevClubs.map(club => {\n        // Check if this is the club that was registered for\n        if (club._id === recruitmentId && student && student.uid) {\n          const studentUidNumber = Number(student.uid);\n          // If the student's UID is not already in pending, add it\n          if (!club.pending_std.includes(studentUidNumber)) {\n            return {\n              ...club,\n              pending_std: [...club.pending_std, studentUidNumber] // Add student UID to pending list\n            };\n          }\n          // If student was already pending, return the club as is\n          return club;\n        }\n        return club; // Return unchanged club if not the one being updated\n      }));\n\n      // The useEffect for search will automatically re-filter filteredClubs based on the updated recruitingClubs state.\n    } catch (err) {\n      var _err$data;\n      console.error(\"Registration Error:\", err);\n      // Display a user-friendly error message from the backend or a generic one\n      setError(((_err$data = err.data) === null || _err$data === void 0 ? void 0 : _err$data.message) || err.message || \"An unexpected error occurred during registration.\");\n      // The button state will implicitly revert if the fetch failed before the state update\n      // but managing a specific 'isSubmitting' state per card would be more robust.\n    }\n  };\n\n  // --- Render UI ---\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Join Clubs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loading-message\",\n        children: \"Loading recruiting clubs...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 14\n    }, this);\n  }\n\n  // Only show a global error message if there's an error AND not loading\n  if (error && !loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Join Clubs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Join Clubs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pending-interviews\",\n        children: [\"Pending Applications: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"pending-count\",\n          children: pendingCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"search-input\",\n          placeholder: \"Search by Club Name or ID\",\n          value: searchTerm,\n          onChange: e => setSearchTerm(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"clubs-grid\",\n      className: \"clubs-grid\",\n      children: filteredClubs.length > 0 ? filteredClubs.map(club => {\n        const studentUidNumber = Number(student === null || student === void 0 ? void 0 : student.uid); // Get student UID safely\n\n        // Determine button/status state for *this* club card\n        const isApproved = student && club.approved_std.includes(studentUidNumber);\n        const isRejected = student && club.rejected_std.includes(studentUidNumber);\n        const isPending = student && club.pending_std.includes(studentUidNumber);\n        let buttonContent;\n        let buttonDisabled = false;\n        let statusMessage = null; // To display messages like Approved/Rejected\n\n        if (isApproved) {\n          statusMessage = 'Approved';\n          buttonDisabled = true;\n        } else if (isRejected) {\n          statusMessage = 'Rejected';\n          buttonDisabled = true;\n        } else if (isPending) {\n          buttonContent = 'Already Applied';\n          buttonDisabled = true;\n        } else {\n          buttonContent = 'Register';\n          buttonDisabled = false;\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"club-card\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [club.clubName, \" (\", club.cid || 'N/A', \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Semester: \", club.semester]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: club.description || 'No description provided.'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-action-area\",\n            children: [\" \", statusMessage ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `status-message status-${statusMessage.toLowerCase()}`,\n              children: statusMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"register-button\",\n              onClick: () => handleRegister(club._id) // Call handler with recruitment ID\n              ,\n              disabled: buttonDisabled,\n              children: buttonContent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 33\n          }, this)]\n        }, club._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 29\n        }, this);\n      }) :\n      // Show message if no clubs found or no results after search\n      recruitingClubs.length > 0 && searchTerm !== '' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-clubs-message\",\n        children: \"No clubs match your search.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-clubs-message\",\n        children: \"No clubs are currently recruiting.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 9\n  }, this);\n}\n_s(JoinClubsPage, \"bea/pLvMkwyuqSWgXZ3/AW7QD7k=\");\n_c = JoinClubsPage;\nexport default JoinClubsPage;\nvar _c;\n$RefreshReg$(_c, \"JoinClubsPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","handleResponse","response","data","json","ok","error","Error","message","status","checkStudentAuth","fetch","fetchRecruitingClubs","registerForClub","recruitmentId","method","headers","body","JSON","stringify","fetchPendingInterviewsCount","JoinClubsPage","_s","recruitingClubs","setRecruitingClubs","filteredClubs","setFilteredClubs","searchTerm","setSearchTerm","pendingCount","setPendingCount","loading","setLoading","setError","student","setStudent","initializePage","authData","isLoggedIn","console","log","window","location","href","clubsData","pendingData","err","query","toLowerCase","filtered","filter","club","nameMatch","clubName","includes","idMatch","cid","String","handleRegister","result","prevClubs","map","_id","uid","studentUidNumber","Number","pending_std","_err$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","type","placeholder","value","onChange","e","target","length","isApproved","approved_std","isRejected","rejected_std","isPending","buttonContent","buttonDisabled","statusMessage","semester","description","onClick","disabled","_c","$RefreshReg$"],"sources":["E:/ClubSync/frontend/src/students/JoinClubsPage.jsx"],"sourcesContent":["// src/students/JoinClubsPage.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport './JoinClubsPage.css'; // Import the CSS file from the same directory\r\n\r\n// --- API Call Functions (Moved here as per request) ---\r\nconst API_BASE_URL = '/api'; // Adjust if your API is served from a different path\r\n\r\n// Helper to handle fetch responses\r\nasync function handleResponse(response) {\r\n    const data = await response.json();\r\n    if (!response.ok) {\r\n        const error = new Error(data.message || 'Something went wrong');\r\n        error.status = response.status;\r\n        error.data = data; // Attach the response body to the error\r\n        throw error;\r\n    }\r\n    return data;\r\n}\r\n\r\n// Check if student is authenticated\r\nconst checkStudentAuth = async () => {\r\n    const response = await fetch(`${API_BASE_URL}/student/check-auth`);\r\n    // No need to throw error on 401 here, the page component handles non-logged-in state\r\n    const data = await response.json();\r\n     // Attach the raw status for the component to check\r\n    data.status = response.status;\r\n    return data;\r\n};\r\n\r\n// Fetch all currently recruiting clubs\r\nconst fetchRecruitingClubs = async () => {\r\n    const response = await fetch(`${API_BASE_URL}/recruitment/recruiting`);\r\n    return handleResponse(response);\r\n};\r\n\r\n// Register student for a club recruitment\r\nconst registerForClub = async (recruitmentId) => {\r\n    const response = await fetch(`${API_BASE_URL}/student/register-club`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ recruitmentId }),\r\n    });\r\n    return handleResponse(response);\r\n};\r\n\r\n// Fetch pending interviews count for the logged-in student\r\nconst fetchPendingInterviewsCount = async () => {\r\n    const response = await fetch(`${API_BASE_URL}/student/pending-interviews`);\r\n    return handleResponse(response);\r\n};\r\n// --- End API Call Functions ---\r\n\r\n\r\nfunction JoinClubsPage() {\r\n    const [recruitingClubs, setRecruitingClubs] = useState([]);\r\n    const [filteredClubs, setFilteredClubs] = useState([]);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [pendingCount, setPendingCount] = useState(0);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [student, setStudent] = useState(null); // To store logged-in student info\r\n\r\n    // --- Authentication Check and Initial Data Fetch ---\r\n    useEffect(() => {\r\n        const initializePage = async () => {\r\n            try {\r\n                // Check Authentication\r\n                const authData = await checkStudentAuth();\r\n                 if (!authData.isLoggedIn) {\r\n                    console.log(\"Student not logged in, redirecting...\");\r\n                    // Use window.location for a simple redirect, replace with React Router navigate if used\r\n                    window.location.href = '/login'; // Adjust login page path\r\n                    return; // Stop execution\r\n                }\r\n                setStudent(authData.student); // Store student info from session\r\n\r\n                // Fetch initial data only if authenticated\r\n                const clubsData = await fetchRecruitingClubs();\r\n                setRecruitingClubs(clubsData);\r\n                setFilteredClubs(clubsData); // Initially show all clubs\r\n\r\n                const pendingData = await fetchPendingInterviewsCount();\r\n                setPendingCount(pendingData.pendingCount);\r\n\r\n            } catch (err) {\r\n                console.error(\"Initialization Error:\", err);\r\n                 if (err.status !== 401) { // Avoid showing error if it's just an auth redirect\r\n                     setError(\"Failed to load data. Please try again.\");\r\n                 }\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        initializePage();\r\n    }, []); // Empty dependency array means this runs once on mount\r\n\r\n    // --- Handle Search Logic ---\r\n    useEffect(() => {\r\n        const query = searchTerm.toLowerCase();\r\n        const filtered = recruitingClubs.filter(club => {\r\n            // Search by club name or numeric club ID (cid)\r\n            const nameMatch = club.clubName && club.clubName.toLowerCase().includes(query);\r\n            // Convert cid to string for searching, handle null/undefined cid\r\n            const idMatch = club.cid != null && String(club.cid).includes(query);\r\n            return nameMatch || idMatch;\r\n        });\r\n        setFilteredClubs(filtered);\r\n    }, [searchTerm, recruitingClubs]); // Re-run filter when search term or clubs list changes\r\n\r\n\r\n    // --- Handle Registration ---\r\n    const handleRegister = async (recruitmentId) => {\r\n        // Find the club in the current filtered list to potentially update its button state immediately\r\n        // This is a basic approach; managing loading state per card is more complex.\r\n        // We'll just rely on the state update after the fetch for simplicity as requested.\r\n\r\n        setError(null); // Clear previous errors\r\n\r\n        try {\r\n            const result = await registerForClub(recruitmentId);\r\n            console.log(\"Registration result:\", result);\r\n\r\n            // Update pending count from the backend response\r\n            setPendingCount(result.pendingCount);\r\n\r\n            // Update the local state for recruitingClubs to reflect the student's new pending status\r\n            // This ensures the button changes to \"Already Applied\" without a full page reload.\r\n            setRecruitingClubs(prevClubs =>\r\n                 prevClubs.map(club => {\r\n                     // Check if this is the club that was registered for\r\n                     if (club._id === recruitmentId && student && student.uid) {\r\n                         const studentUidNumber = Number(student.uid);\r\n                         // If the student's UID is not already in pending, add it\r\n                         if (!club.pending_std.includes(studentUidNumber)) {\r\n                            return {\r\n                                ...club,\r\n                                pending_std: [...club.pending_std, studentUidNumber] // Add student UID to pending list\r\n                            };\r\n                         }\r\n                          // If student was already pending, return the club as is\r\n                          return club;\r\n                     }\r\n                     return club; // Return unchanged club if not the one being updated\r\n                 })\r\n            );\r\n\r\n            // The useEffect for search will automatically re-filter filteredClubs based on the updated recruitingClubs state.\r\n\r\n\r\n        } catch (err) {\r\n            console.error(\"Registration Error:\", err);\r\n             // Display a user-friendly error message from the backend or a generic one\r\n            setError(err.data?.message || err.message || \"An unexpected error occurred during registration.\");\r\n            // The button state will implicitly revert if the fetch failed before the state update\r\n            // but managing a specific 'isSubmitting' state per card would be more robust.\r\n        }\r\n    };\r\n\r\n\r\n    // --- Render UI ---\r\n    if (loading) {\r\n        return (\r\n             <div className=\"container\">\r\n                 <h1>Join Clubs</h1>\r\n                 <p className=\"loading-message\">Loading recruiting clubs...</p>\r\n             </div>\r\n        );\r\n    }\r\n\r\n    // Only show a global error message if there's an error AND not loading\r\n    if (error && !loading) {\r\n        return (\r\n            <div className=\"container\">\r\n                 <h1>Join Clubs</h1>\r\n                 <p className=\"error-message\">{error}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Join Clubs</h1>\r\n\r\n            <div className=\"info-bar\">\r\n                <div className=\"pending-interviews\">\r\n                    Pending Applications: <span id=\"pending-count\">{pendingCount}</span>\r\n                </div>\r\n                <div className=\"search-bar\">\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"search-input\"\r\n                        placeholder=\"Search by Club Name or ID\"\r\n                        value={searchTerm}\r\n                        onChange={(e) => setSearchTerm(e.target.value)}\r\n                    />\r\n                     {/* Search button is optional if filtering happens on input change */}\r\n                     {/* <button id=\"search-button\" onClick={() => setSearchTerm(searchTerm)}>Search</button> */}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Although we have a global error state, you could still display errors here */}\r\n            {/* {error && <div className=\"error-message\">{error}</div>} */}\r\n\r\n\r\n            <div id=\"clubs-grid\" className=\"clubs-grid\">\r\n                 {/* Render Club Cards directly within the map */}\r\n                {filteredClubs.length > 0 ? (\r\n                     filteredClubs.map(club => {\r\n                         const studentUidNumber = Number(student?.uid); // Get student UID safely\r\n\r\n                         // Determine button/status state for *this* club card\r\n                         const isApproved = student && club.approved_std.includes(studentUidNumber);\r\n                         const isRejected = student && club.rejected_std.includes(studentUidNumber);\r\n                         const isPending = student && club.pending_std.includes(studentUidNumber);\r\n\r\n                         let buttonContent;\r\n                         let buttonDisabled = false;\r\n                         let statusMessage = null; // To display messages like Approved/Rejected\r\n\r\n                         if (isApproved) {\r\n                             statusMessage = 'Approved';\r\n                             buttonDisabled = true;\r\n                         } else if (isRejected) {\r\n                             statusMessage = 'Rejected';\r\n                             buttonDisabled = true;\r\n                         } else if (isPending) {\r\n                              buttonContent = 'Already Applied';\r\n                              buttonDisabled = true;\r\n                         } else {\r\n                             buttonContent = 'Register';\r\n                             buttonDisabled = false;\r\n                         }\r\n\r\n                         return (\r\n                            <div key={club._id} className=\"club-card\"> {/* Use recruitment ID as key */}\r\n                                <h3>{club.clubName} ({club.cid || 'N/A'})</h3>\r\n                                <p>Semester: {club.semester}</p>\r\n                                <p>{club.description || 'No description provided.'}</p>\r\n                                <div className=\"card-action-area\"> {/* Flex container for button/message */}\r\n                                    {statusMessage ? (\r\n                                        <span className={`status-message status-${statusMessage.toLowerCase()}`}>{statusMessage}</span>\r\n                                    ) : (\r\n                                        <button\r\n                                            className=\"register-button\"\r\n                                            onClick={() => handleRegister(club._id)} // Call handler with recruitment ID\r\n                                            disabled={buttonDisabled}\r\n                                        >\r\n                                            {buttonContent}\r\n                                        </button>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                         );\r\n                     })\r\n                ) : (\r\n                     // Show message if no clubs found or no results after search\r\n                    recruitingClubs.length > 0 && searchTerm !== '' ? (\r\n                        <p className=\"no-clubs-message\">No clubs match your search.</p>\r\n                    ) : (\r\n                        <p className=\"no-clubs-message\">No clubs are currently recruiting.</p>\r\n                    )\r\n                )}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JoinClubsPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}