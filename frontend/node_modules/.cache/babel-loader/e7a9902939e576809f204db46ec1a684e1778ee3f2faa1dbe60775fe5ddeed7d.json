{"ast":null,"code":"var _jsxFileName = \"E:\\\\ClubSync\\\\frontend\\\\src\\\\students\\\\JoinClubsPage.jsx\",\n  _s = $RefreshSig$();\n// src/students/JoinClubsPage.jsx\nimport React, { useState, useEffect } from 'react';\nimport './JoinClubsPage.css'; // Import the CSS file from the same directory\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:3001/api';\n\n// Helper to handle fetch responses (No change needed here)\nasync function handleResponse(response) {\n  const data = await response.json();\n  if (!response.ok) {\n    const error = new Error(data.message || 'Something went wrong');\n    error.status = response.status;\n    error.data = data;\n    throw error;\n  }\n  return data;\n}\n\n// Check if student is authenticated\nconst checkStudentAuth = async () => {\n  const response = await fetch(`${API_BASE_URL}/students/check-auth`, {\n    credentials: 'include' // <--- ADD THIS\n  });\n  const data = await response.json();\n  data.status = response.status;\n  return data;\n};\n\n// Fetch all currently recruiting clubs (Might or might not need auth, but safer to include if showing personalized status)\nconst fetchRecruitingClubs = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/recruitment/recruiting`, {\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      // Try to get error details\n      let errorData;\n      try {\n        errorData = await response.json();\n      } catch (e) {\n        errorData = {\n          message: await response.text()\n        };\n      }\n      console.error('Server error:', {\n        status: response.status,\n        statusText: response.statusText,\n        errorData\n      });\n      throw new Error(errorData.message || `Server error: ${response.status}`);\n    }\n    return await response.json();\n  } catch (err) {\n    console.error('Network error:', err);\n    throw new Error(err.message.includes('Failed to fetch') ? 'Cannot connect to server. Please check your network.' : err.message);\n  }\n};\n\n// Register student for a club recruitment\nconst registerForClub = async recruitmentId => {\n  const response = await fetch(`${API_BASE_URL}/students/register-club`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      recruitmentId\n    }),\n    credentials: 'include' // <--- ADD THIS\n  });\n  return handleResponse(response);\n};\n\n// Fetch pending interviews count for the logged-in student\nconst fetchPendingInterviewsCount = async () => {\n  const response = await fetch(`${API_BASE_URL}/students/pending-interviews`, {\n    credentials: 'include' // <--- ADD THIS\n  });\n  return handleResponse(response);\n};\n// --- End API Call Functions ---\n\nfunction JoinClubsPage() {\n  _s();\n  const [recruitingClubs, setRecruitingClubs] = useState([]);\n  const [filteredClubs, setFilteredClubs] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [pendingCount, setPendingCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [student, setStudent] = useState(null); // To store logged-in student info\n\n  // --- Authentication Check and Initial Data Fetch ---\n  useEffect(() => {\n    const initializePage = async () => {\n      try {\n        // Check Authentication\n        const authData = await checkStudentAuth();\n        if (!authData.isLoggedIn) {\n          console.log(\"Student not logged in, redirecting...\");\n          // Use window.location for a simple redirect, replace with React Router navigate if used\n          window.location.href = '/login'; // Adjust login page path\n          return; // Stop execution\n        }\n        setStudent(authData.student); // Store student info from session\n\n        // Fetch initial data only if authenticated\n        const clubsData = await fetchRecruitingClubs();\n        setRecruitingClubs(clubsData);\n        setFilteredClubs(clubsData); // Initially show all clubs\n\n        const pendingData = await fetchPendingInterviewsCount();\n        setPendingCount(pendingData.pendingCount);\n      } catch (err) {\n        console.error(\"Initialization Error:\", err);\n        if (err.status !== 401) {\n          // Avoid showing error if it's just an auth redirect\n          setError(\"Failed to load data. Please try again.\");\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializePage();\n  }, []); // Empty dependency array means this runs once on mount\n\n  // --- Handle Search Logic ---\n  useEffect(() => {\n    const query = searchTerm.toLowerCase();\n    const filtered = recruitingClubs.filter(club => {\n      // Search by club name or numeric club ID (cid)\n      const nameMatch = club.clubName && club.clubName.toLowerCase().includes(query);\n      // Convert cid to string for searching, handle null/undefined cid\n      const idMatch = club.cid != null && String(club.cid).includes(query);\n      return nameMatch || idMatch;\n    });\n    setFilteredClubs(filtered);\n  }, [searchTerm, recruitingClubs]); // Re-run filter when search term or clubs list changes\n\n  // --- Handle Registration ---\n  // Enhanced registration handler\n  const handleRegister = async recruitmentId => {\n    setError(null);\n    try {\n      console.log(`Registering for recruitment ${recruitmentId}...`);\n      const response = await fetch(`${API_BASE_URL}/students/register-club`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          recruitmentId\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Registration failed:', errorData);\n        throw new Error(errorData.message || 'Registration failed');\n      }\n      const result = await response.json();\n      console.log('Registration successful:', result);\n      setRecruitingClubs(prev => prev.map(rec => {\n        if (rec._id === recruitmentId && student !== null && student !== void 0 && student.uid) {\n          const uidNum = Number(student.uid);\n          if (!rec.pending_std.includes(uidNum)) {\n            return {\n              ...rec,\n              pending_std: [...rec.pending_std, uidNum]\n            };\n          }\n        }\n        return rec;\n      }));\n      setPendingCount(result.pendingCount);\n\n      // Show success message\n      alert(result.message || 'Application submitted successfully!');\n    } catch (err) {\n      console.error('Registration error:', err);\n      setError(err.message);\n      alert(`Error: ${err.message}`);\n    }\n  };\n\n  // --- Render UI ---\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Join Clubs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loading-message\",\n        children: \"Loading recruiting clubs...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 14\n    }, this);\n  }\n\n  // Only show a global error message if there's an error AND not loading\n  if (error && !loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Join Clubs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Join Clubs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pending-interviews\",\n        children: [\"Pending Applications: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"pending-count\",\n          children: pendingCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"search-input\",\n          placeholder: \"Search by Club Name or ID\",\n          value: searchTerm,\n          onChange: e => setSearchTerm(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"clubs-grid\",\n      className: \"clubs-grid\",\n      children: filteredClubs.length > 0 ? filteredClubs.map(club => {\n        const studentUidNumber = Number(student === null || student === void 0 ? void 0 : student.uid); // Get student UID safely\n\n        // Determine button/status state for *this* club card\n        const isApproved = student && club.approved_std.includes(studentUidNumber);\n        const isRejected = student && club.rejected_std.includes(studentUidNumber);\n        const isPending = student && club.pending_std.includes(studentUidNumber);\n        let buttonContent;\n        let buttonDisabled = false;\n        let statusMessage = null; // To display messages like Approved/Rejected\n\n        if (isApproved) {\n          statusMessage = 'Approved';\n          buttonDisabled = true;\n        } else if (isRejected) {\n          statusMessage = 'Rejected';\n          buttonDisabled = true;\n        } else if (isPending) {\n          buttonContent = 'Already Applied';\n          buttonDisabled = true;\n        } else {\n          buttonContent = 'Register';\n          buttonDisabled = false;\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"club-card\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [club.clubName, \" (\", club.cid || 'N/A', \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Semester: \", club.semester]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: club.description || 'No description provided.'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-action-area\",\n            children: [\" \", statusMessage ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `status-message status-${statusMessage.toLowerCase()}`,\n              children: statusMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"register-button\",\n              onClick: () => handleRegister(club._id) // Call handler with recruitment ID\n              ,\n              disabled: buttonDisabled,\n              children: buttonContent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 33\n          }, this)]\n        }, club._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 29\n        }, this);\n      }) :\n      // Show message if no clubs found or no results after search\n      recruitingClubs.length > 0 && searchTerm !== '' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-clubs-message\",\n        children: \"No clubs match your search.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-clubs-message\",\n        children: \"No clubs are currently recruiting.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 9\n  }, this);\n}\n_s(JoinClubsPage, \"bea/pLvMkwyuqSWgXZ3/AW7QD7k=\");\n_c = JoinClubsPage;\nexport default JoinClubsPage;\nvar _c;\n$RefreshReg$(_c, \"JoinClubsPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","handleResponse","response","data","json","ok","error","Error","message","status","checkStudentAuth","fetch","credentials","fetchRecruitingClubs","errorData","e","text","console","statusText","err","includes","registerForClub","recruitmentId","method","headers","body","JSON","stringify","fetchPendingInterviewsCount","JoinClubsPage","_s","recruitingClubs","setRecruitingClubs","filteredClubs","setFilteredClubs","searchTerm","setSearchTerm","pendingCount","setPendingCount","loading","setLoading","setError","student","setStudent","initializePage","authData","isLoggedIn","log","window","location","href","clubsData","pendingData","query","toLowerCase","filtered","filter","club","nameMatch","clubName","idMatch","cid","String","handleRegister","result","prev","map","rec","_id","uid","uidNum","Number","pending_std","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","type","placeholder","value","onChange","target","length","studentUidNumber","isApproved","approved_std","isRejected","rejected_std","isPending","buttonContent","buttonDisabled","statusMessage","semester","description","onClick","disabled","_c","$RefreshReg$"],"sources":["E:/ClubSync/frontend/src/students/JoinClubsPage.jsx"],"sourcesContent":["// src/students/JoinClubsPage.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport './JoinClubsPage.css'; // Import the CSS file from the same directory\r\n\r\nconst API_BASE_URL = 'http://localhost:3001/api';\r\n\r\n// Helper to handle fetch responses (No change needed here)\r\nasync function handleResponse(response) {\r\n    const data = await response.json();\r\n    if (!response.ok) {\r\n        const error = new Error(data.message || 'Something went wrong');\r\n        error.status = response.status;\r\n        error.data = data;\r\n        throw error;\r\n    }\r\n    return data;\r\n}\r\n\r\n// Check if student is authenticated\r\nconst checkStudentAuth = async () => {\r\n    const response = await fetch(`${API_BASE_URL}/students/check-auth`, {\r\n        credentials: 'include' // <--- ADD THIS\r\n    });\r\n    const data = await response.json();\r\n    data.status = response.status;\r\n    return data;\r\n};\r\n\r\n// Fetch all currently recruiting clubs (Might or might not need auth, but safer to include if showing personalized status)\r\nconst fetchRecruitingClubs = async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/recruitment/recruiting`, {\r\n        credentials: 'include'\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        // Try to get error details\r\n        let errorData;\r\n        try {\r\n          errorData = await response.json();\r\n        } catch (e) {\r\n          errorData = { message: await response.text() };\r\n        }\r\n        \r\n        console.error('Server error:', {\r\n          status: response.status,\r\n          statusText: response.statusText,\r\n          errorData\r\n        });\r\n  \r\n        throw new Error(errorData.message || `Server error: ${response.status}`);\r\n      }\r\n  \r\n      return await response.json();\r\n  \r\n    } catch (err) {\r\n      console.error('Network error:', err);\r\n      throw new Error(\r\n        err.message.includes('Failed to fetch') \r\n          ? 'Cannot connect to server. Please check your network.'\r\n          : err.message\r\n      );\r\n    }\r\n  };\r\n\r\n// Register student for a club recruitment\r\nconst registerForClub = async (recruitmentId) => {\r\n    const response = await fetch(`${API_BASE_URL}/students/register-club`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ recruitmentId }),\r\n        credentials: 'include' // <--- ADD THIS\r\n    });\r\n    return handleResponse(response);\r\n};\r\n\r\n// Fetch pending interviews count for the logged-in student\r\nconst fetchPendingInterviewsCount = async () => {\r\n    const response = await fetch(`${API_BASE_URL}/students/pending-interviews`, {\r\n        credentials: 'include' // <--- ADD THIS\r\n    });\r\n    return handleResponse(response);\r\n};\r\n// --- End API Call Functions ---\r\n\r\n\r\nfunction JoinClubsPage() {\r\n    const [recruitingClubs, setRecruitingClubs] = useState([]);\r\n    const [filteredClubs, setFilteredClubs] = useState([]);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [pendingCount, setPendingCount] = useState(0);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [student, setStudent] = useState(null); // To store logged-in student info\r\n\r\n    // --- Authentication Check and Initial Data Fetch ---\r\n    useEffect(() => {\r\n        const initializePage = async () => {\r\n            try {\r\n                // Check Authentication\r\n                const authData = await checkStudentAuth();\r\n                 if (!authData.isLoggedIn) {\r\n                    console.log(\"Student not logged in, redirecting...\");\r\n                    // Use window.location for a simple redirect, replace with React Router navigate if used\r\n                    window.location.href = '/login'; // Adjust login page path\r\n                    return; // Stop execution\r\n                }\r\n                setStudent(authData.student); // Store student info from session\r\n\r\n                // Fetch initial data only if authenticated\r\n                const clubsData = await fetchRecruitingClubs();\r\n                setRecruitingClubs(clubsData);\r\n                setFilteredClubs(clubsData); // Initially show all clubs\r\n\r\n                const pendingData = await fetchPendingInterviewsCount();\r\n                setPendingCount(pendingData.pendingCount);\r\n\r\n            } catch (err) {\r\n                console.error(\"Initialization Error:\", err);\r\n                 if (err.status !== 401) { // Avoid showing error if it's just an auth redirect\r\n                     setError(\"Failed to load data. Please try again.\");\r\n                 }\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        initializePage();\r\n    }, []); // Empty dependency array means this runs once on mount\r\n\r\n    // --- Handle Search Logic ---\r\n    useEffect(() => {\r\n        const query = searchTerm.toLowerCase();\r\n        const filtered = recruitingClubs.filter(club => {\r\n            // Search by club name or numeric club ID (cid)\r\n            const nameMatch = club.clubName && club.clubName.toLowerCase().includes(query);\r\n            // Convert cid to string for searching, handle null/undefined cid\r\n            const idMatch = club.cid != null && String(club.cid).includes(query);\r\n            return nameMatch || idMatch;\r\n        });\r\n        setFilteredClubs(filtered);\r\n    }, [searchTerm, recruitingClubs]); // Re-run filter when search term or clubs list changes\r\n\r\n\r\n    // --- Handle Registration ---\r\n    // Enhanced registration handler\r\nconst handleRegister = async (recruitmentId) => {\r\n    setError(null);\r\n    \r\n    try {\r\n      console.log(`Registering for recruitment ${recruitmentId}...`);\r\n      const response = await fetch(`${API_BASE_URL}/students/register-club`, {\r\n        method: 'POST',\r\n        credentials: 'include',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ recruitmentId }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        console.error('Registration failed:', errorData);\r\n        throw new Error(errorData.message || 'Registration failed');\r\n      }\r\n  \r\n      const result = await response.json();\r\n      console.log('Registration successful:', result);\r\n\r\n      setRecruitingClubs(prev => \r\n        prev.map(rec => {\r\n          if (rec._id === recruitmentId && student?.uid) {\r\n            const uidNum = Number(student.uid);\r\n            if (!rec.pending_std.includes(uidNum)) {\r\n              return {\r\n                ...rec,\r\n                pending_std: [...rec.pending_std, uidNum]\r\n              };\r\n            }\r\n          }\r\n          return rec;\r\n        })\r\n      );\r\n      \r\n      setPendingCount(result.pendingCount);\r\n      \r\n      // Show success message\r\n      alert(result.message || 'Application submitted successfully!');\r\n  \r\n    } catch (err) {\r\n      console.error('Registration error:', err);\r\n      setError(err.message);\r\n      alert(`Error: ${err.message}`);\r\n    }\r\n  };\r\n\r\n\r\n    // --- Render UI ---\r\n    if (loading) {\r\n        return (\r\n             <div className=\"container\">\r\n                 <h1>Join Clubs</h1>\r\n                 <p className=\"loading-message\">Loading recruiting clubs...</p>\r\n             </div>\r\n        );\r\n    }\r\n\r\n    // Only show a global error message if there's an error AND not loading\r\n    if (error && !loading) {\r\n        return (\r\n            <div className=\"container\">\r\n                 <h1>Join Clubs</h1>\r\n                 <p className=\"error-message\">{error}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Join Clubs</h1>\r\n\r\n            <div className=\"info-bar\">\r\n                <div className=\"pending-interviews\">\r\n                    Pending Applications: <span id=\"pending-count\">{pendingCount}</span>\r\n                </div>\r\n                <div className=\"search-bar\">\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"search-input\"\r\n                        placeholder=\"Search by Club Name or ID\"\r\n                        value={searchTerm}\r\n                        onChange={(e) => setSearchTerm(e.target.value)}\r\n                    />\r\n                     {/* Search button is optional if filtering happens on input change */}\r\n                     {/* <button id=\"search-button\" onClick={() => setSearchTerm(searchTerm)}>Search</button> */}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Although we have a global error state, you could still display errors here */}\r\n            {/* {error && <div className=\"error-message\">{error}</div>} */}\r\n\r\n\r\n            <div id=\"clubs-grid\" className=\"clubs-grid\">\r\n                 {/* Render Club Cards directly within the map */}\r\n                {filteredClubs.length > 0 ? (\r\n                     filteredClubs.map(club => {\r\n                         const studentUidNumber = Number(student?.uid); // Get student UID safely\r\n\r\n                         // Determine button/status state for *this* club card\r\n                         const isApproved = student && club.approved_std.includes(studentUidNumber);\r\n                         const isRejected = student && club.rejected_std.includes(studentUidNumber);\r\n                         const isPending = student && club.pending_std.includes(studentUidNumber);\r\n\r\n                         let buttonContent;\r\n                         let buttonDisabled = false;\r\n                         let statusMessage = null; // To display messages like Approved/Rejected\r\n\r\n                         if (isApproved) {\r\n                             statusMessage = 'Approved';\r\n                             buttonDisabled = true;\r\n                         } else if (isRejected) {\r\n                             statusMessage = 'Rejected';\r\n                             buttonDisabled = true;\r\n                         } else if (isPending) {\r\n                              buttonContent = 'Already Applied';\r\n                              buttonDisabled = true;\r\n                         } else {\r\n                             buttonContent = 'Register';\r\n                             buttonDisabled = false;\r\n                         }\r\n\r\n                         return (\r\n                            <div key={club._id} className=\"club-card\"> {/* Use recruitment ID as key */}\r\n                                <h3>{club.clubName} ({club.cid || 'N/A'})</h3>\r\n                                <p>Semester: {club.semester}</p>\r\n                                <p>{club.description || 'No description provided.'}</p>\r\n                                <div className=\"card-action-area\"> {/* Flex container for button/message */}\r\n                                    {statusMessage ? (\r\n                                        <span className={`status-message status-${statusMessage.toLowerCase()}`}>{statusMessage}</span>\r\n                                    ) : (\r\n                                        <button\r\n                                            className=\"register-button\"\r\n                                            onClick={() => handleRegister(club._id)} // Call handler with recruitment ID\r\n                                            disabled={buttonDisabled}\r\n                                        >\r\n                                            {buttonContent}\r\n                                        </button>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                         );\r\n                     })\r\n                ) : (\r\n                     // Show message if no clubs found or no results after search\r\n                    recruitingClubs.length > 0 && searchTerm !== '' ? (\r\n                        <p className=\"no-clubs-message\">No clubs match your search.</p>\r\n                    ) : (\r\n                        <p className=\"no-clubs-message\">No clubs are currently recruiting.</p>\r\n                    )\r\n                )}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JoinClubsPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}